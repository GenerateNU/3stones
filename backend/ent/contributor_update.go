// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/contributor"
	"backend/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContributorUpdate is the builder for updating Contributor entities.
type ContributorUpdate struct {
	config
	hooks    []Hook
	mutation *ContributorMutation
}

// Where appends a list predicates to the ContributorUpdate builder.
func (cu *ContributorUpdate) Where(ps ...predicate.Contributor) *ContributorUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetFirstName sets the "first_name" field.
func (cu *ContributorUpdate) SetFirstName(s string) *ContributorUpdate {
	cu.mutation.SetFirstName(s)
	return cu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (cu *ContributorUpdate) SetNillableFirstName(s *string) *ContributorUpdate {
	if s != nil {
		cu.SetFirstName(*s)
	}
	return cu
}

// SetLastName sets the "last_name" field.
func (cu *ContributorUpdate) SetLastName(s string) *ContributorUpdate {
	cu.mutation.SetLastName(s)
	return cu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (cu *ContributorUpdate) SetNillableLastName(s *string) *ContributorUpdate {
	if s != nil {
		cu.SetLastName(*s)
	}
	return cu
}

// SetEmail sets the "email" field.
func (cu *ContributorUpdate) SetEmail(s string) *ContributorUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cu *ContributorUpdate) SetNillableEmail(s *string) *ContributorUpdate {
	if s != nil {
		cu.SetEmail(*s)
	}
	return cu
}

// Mutation returns the ContributorMutation object of the builder.
func (cu *ContributorUpdate) Mutation() *ContributorMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ContributorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ContributorUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ContributorUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ContributorUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ContributorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(contributor.Table, contributor.Columns, sqlgraph.NewFieldSpec(contributor.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.FirstName(); ok {
		_spec.SetField(contributor.FieldFirstName, field.TypeString, value)
	}
	if value, ok := cu.mutation.LastName(); ok {
		_spec.SetField(contributor.FieldLastName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.SetField(contributor.FieldEmail, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contributor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ContributorUpdateOne is the builder for updating a single Contributor entity.
type ContributorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContributorMutation
}

// SetFirstName sets the "first_name" field.
func (cuo *ContributorUpdateOne) SetFirstName(s string) *ContributorUpdateOne {
	cuo.mutation.SetFirstName(s)
	return cuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (cuo *ContributorUpdateOne) SetNillableFirstName(s *string) *ContributorUpdateOne {
	if s != nil {
		cuo.SetFirstName(*s)
	}
	return cuo
}

// SetLastName sets the "last_name" field.
func (cuo *ContributorUpdateOne) SetLastName(s string) *ContributorUpdateOne {
	cuo.mutation.SetLastName(s)
	return cuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (cuo *ContributorUpdateOne) SetNillableLastName(s *string) *ContributorUpdateOne {
	if s != nil {
		cuo.SetLastName(*s)
	}
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *ContributorUpdateOne) SetEmail(s string) *ContributorUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cuo *ContributorUpdateOne) SetNillableEmail(s *string) *ContributorUpdateOne {
	if s != nil {
		cuo.SetEmail(*s)
	}
	return cuo
}

// Mutation returns the ContributorMutation object of the builder.
func (cuo *ContributorUpdateOne) Mutation() *ContributorMutation {
	return cuo.mutation
}

// Where appends a list predicates to the ContributorUpdate builder.
func (cuo *ContributorUpdateOne) Where(ps ...predicate.Contributor) *ContributorUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ContributorUpdateOne) Select(field string, fields ...string) *ContributorUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Contributor entity.
func (cuo *ContributorUpdateOne) Save(ctx context.Context) (*Contributor, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ContributorUpdateOne) SaveX(ctx context.Context) *Contributor {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ContributorUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ContributorUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ContributorUpdateOne) sqlSave(ctx context.Context) (_node *Contributor, err error) {
	_spec := sqlgraph.NewUpdateSpec(contributor.Table, contributor.Columns, sqlgraph.NewFieldSpec(contributor.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Contributor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contributor.FieldID)
		for _, f := range fields {
			if !contributor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contributor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.FirstName(); ok {
		_spec.SetField(contributor.FieldFirstName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.LastName(); ok {
		_spec.SetField(contributor.FieldLastName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.SetField(contributor.FieldEmail, field.TypeString, value)
	}
	_node = &Contributor{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contributor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
