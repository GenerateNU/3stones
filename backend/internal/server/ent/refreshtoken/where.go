// Code generated by ent, DO NOT EDIT.

package refreshtoken

import (
	"backend/internal/server/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.RefreshToken {
	return predicate.RefreshToken(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RefreshToken {
	return predicate.RefreshToken(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RefreshToken {
	return predicate.RefreshToken(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RefreshToken {
	return predicate.RefreshToken(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RefreshToken {
	return predicate.RefreshToken(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RefreshToken {
	return predicate.RefreshToken(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RefreshToken {
	return predicate.RefreshToken(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RefreshToken {
	return predicate.RefreshToken(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RefreshToken {
	return predicate.RefreshToken(sql.FieldLTE(FieldID, id))
}

// RefreshTokenHash applies equality check predicate on the "refresh_token_hash" field. It's identical to RefreshTokenHashEQ.
func RefreshTokenHash(v string) predicate.RefreshToken {
	return predicate.RefreshToken(sql.FieldEQ(FieldRefreshTokenHash, v))
}

// RefreshTokenHashEQ applies the EQ predicate on the "refresh_token_hash" field.
func RefreshTokenHashEQ(v string) predicate.RefreshToken {
	return predicate.RefreshToken(sql.FieldEQ(FieldRefreshTokenHash, v))
}

// RefreshTokenHashNEQ applies the NEQ predicate on the "refresh_token_hash" field.
func RefreshTokenHashNEQ(v string) predicate.RefreshToken {
	return predicate.RefreshToken(sql.FieldNEQ(FieldRefreshTokenHash, v))
}

// RefreshTokenHashIn applies the In predicate on the "refresh_token_hash" field.
func RefreshTokenHashIn(vs ...string) predicate.RefreshToken {
	return predicate.RefreshToken(sql.FieldIn(FieldRefreshTokenHash, vs...))
}

// RefreshTokenHashNotIn applies the NotIn predicate on the "refresh_token_hash" field.
func RefreshTokenHashNotIn(vs ...string) predicate.RefreshToken {
	return predicate.RefreshToken(sql.FieldNotIn(FieldRefreshTokenHash, vs...))
}

// RefreshTokenHashGT applies the GT predicate on the "refresh_token_hash" field.
func RefreshTokenHashGT(v string) predicate.RefreshToken {
	return predicate.RefreshToken(sql.FieldGT(FieldRefreshTokenHash, v))
}

// RefreshTokenHashGTE applies the GTE predicate on the "refresh_token_hash" field.
func RefreshTokenHashGTE(v string) predicate.RefreshToken {
	return predicate.RefreshToken(sql.FieldGTE(FieldRefreshTokenHash, v))
}

// RefreshTokenHashLT applies the LT predicate on the "refresh_token_hash" field.
func RefreshTokenHashLT(v string) predicate.RefreshToken {
	return predicate.RefreshToken(sql.FieldLT(FieldRefreshTokenHash, v))
}

// RefreshTokenHashLTE applies the LTE predicate on the "refresh_token_hash" field.
func RefreshTokenHashLTE(v string) predicate.RefreshToken {
	return predicate.RefreshToken(sql.FieldLTE(FieldRefreshTokenHash, v))
}

// RefreshTokenHashContains applies the Contains predicate on the "refresh_token_hash" field.
func RefreshTokenHashContains(v string) predicate.RefreshToken {
	return predicate.RefreshToken(sql.FieldContains(FieldRefreshTokenHash, v))
}

// RefreshTokenHashHasPrefix applies the HasPrefix predicate on the "refresh_token_hash" field.
func RefreshTokenHashHasPrefix(v string) predicate.RefreshToken {
	return predicate.RefreshToken(sql.FieldHasPrefix(FieldRefreshTokenHash, v))
}

// RefreshTokenHashHasSuffix applies the HasSuffix predicate on the "refresh_token_hash" field.
func RefreshTokenHashHasSuffix(v string) predicate.RefreshToken {
	return predicate.RefreshToken(sql.FieldHasSuffix(FieldRefreshTokenHash, v))
}

// RefreshTokenHashEqualFold applies the EqualFold predicate on the "refresh_token_hash" field.
func RefreshTokenHashEqualFold(v string) predicate.RefreshToken {
	return predicate.RefreshToken(sql.FieldEqualFold(FieldRefreshTokenHash, v))
}

// RefreshTokenHashContainsFold applies the ContainsFold predicate on the "refresh_token_hash" field.
func RefreshTokenHashContainsFold(v string) predicate.RefreshToken {
	return predicate.RefreshToken(sql.FieldContainsFold(FieldRefreshTokenHash, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.RefreshToken {
	return predicate.RefreshToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.RefreshToken {
	return predicate.RefreshToken(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RefreshToken) predicate.RefreshToken {
	return predicate.RefreshToken(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RefreshToken) predicate.RefreshToken {
	return predicate.RefreshToken(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RefreshToken) predicate.RefreshToken {
	return predicate.RefreshToken(sql.NotPredicates(p))
}
